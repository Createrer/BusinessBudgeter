package com.f5infosol.businessbudgeter.dao.rowmapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.LinkedHashMap;
import java.util.Map;

import org.springframework.jdbc.core.RowMapper;

import com.f5infosol.businessbudgeter.domain.StaffRosters;
import com.nurkiewicz.jdbcrepository.RowUnmapper;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class StaffRostersDB
{

	private static String TABLE_NAME = "STAFF_ROSTERS";

	private static String TABLE_ALIAS = "sr";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public enum COLUMNS
	{
		SATFF_ROSTER_ID("satff_roster_id"),
		STAFF_ID("staff_id"),
		ROSTER_DATE("roster_date"),
		START_TIME("start_time"),
		FINISH_TIME("finish_time"),
		TOTAL_HOURS("total_hours"),
		PUBLIC_HOLIDAY("public_holiday"),
		UPDATED_ON("updated_on"),
		UPDATED_BY("updated_by"),
		INCOME_CENTER_ID("income_center_id"), 
		WORK_OF_HOUSE("boh_foh"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public StaffRostersDB ()
	{

	}

	public static final RowMapper<StaffRosters> ROW_MAPPER = new StaffRostersRowMapper ();
	public static final class  StaffRostersRowMapper implements RowMapper<StaffRosters>
	{
		public StaffRosters mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			StaffRosters obj = new StaffRosters();
			obj.setSatffRosterId(rs.getInt(COLUMNS.SATFF_ROSTER_ID.getColumnName()));
			obj.setStaffId(rs.getInt(COLUMNS.STAFF_ID.getColumnName()));
			obj.setRosterDate(rs.getTimestamp(COLUMNS.ROSTER_DATE.getColumnName()));
			obj.setStartTime(rs.getString(COLUMNS.START_TIME.getColumnName()));
			obj.setFinishTime(rs.getString(COLUMNS.FINISH_TIME.getColumnName()));
			obj.setTotalHours(rs.getDouble(COLUMNS.TOTAL_HOURS.getColumnName()));
			obj.setPublicHoliday(rs.getBoolean(COLUMNS.PUBLIC_HOLIDAY.getColumnName()));
			obj.setUpdatedOn(rs.getTimestamp(COLUMNS.UPDATED_ON.getColumnName()));
			obj.setUpdatedBy(rs.getString(COLUMNS.UPDATED_BY.getColumnName()));
			obj.setIncomeCenterId(rs.getInt(COLUMNS.INCOME_CENTER_ID.getColumnName()));
			obj.setWorkofhouse(rs.getString(COLUMNS.WORK_OF_HOUSE.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<StaffRosters> ROW_UNMAPPER = new StaffRostersRowUnmapper ();
	public static final class StaffRostersRowUnmapper implements RowUnmapper<StaffRosters>
	{
		public Map<String, Object> mapColumns(StaffRosters staffrosters)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.SATFF_ROSTER_ID.getColumnName(), staffrosters.getSatffRosterId());
			mapping.put(COLUMNS.STAFF_ID.getColumnName(), staffrosters.getStaffId());
			if (staffrosters.getRosterDate() != null)
				mapping.put(COLUMNS.ROSTER_DATE.getColumnName(), new Timestamp (staffrosters.getRosterDate().getTime()));
			/*if (staffrosters.getStartTime() != null)
				mapping.put(COLUMNS.START_TIME.getColumnName(), new Timestamp (staffrosters.getStartTime().getTime()));
			if (staffrosters.getFinishTime() != null)
				mapping.put(COLUMNS.FINISH_TIME.getColumnName(), new Timestamp (staffrosters.getFinishTime().getTime()));*/
			mapping.put(COLUMNS.TOTAL_HOURS.getColumnName(), staffrosters.getTotalHours());
			mapping.put(COLUMNS.PUBLIC_HOLIDAY.getColumnName(), staffrosters.getPublicHoliday());
			if (staffrosters.getUpdatedOn() != null)
				mapping.put(COLUMNS.UPDATED_ON.getColumnName(), new Timestamp (staffrosters.getUpdatedOn().getTime()));
			mapping.put(COLUMNS.UPDATED_BY.getColumnName(), staffrosters.getUpdatedBy());
			mapping.put(COLUMNS.INCOME_CENTER_ID.getColumnName(), staffrosters.getIncomeCenterId());
			mapping.put(COLUMNS.WORK_OF_HOUSE.getColumnName(),staffrosters.getWorkofhouse());
			return mapping;
		}
	}

	public static final RowMapper<StaffRosters> ALIAS_ROW_MAPPER = new StaffRostersAliasRowMapper ();
	public static final class  StaffRostersAliasRowMapper implements RowMapper<StaffRosters>
	{
		private boolean loadAllFKeys = false;
		public void setLoadAllFKeys (boolean loadAllFKeys)
		{
			this.loadAllFKeys = loadAllFKeys;
		}

		private boolean loadIncomeCentres = false;
		public void setLoadIncomeCentres (boolean loadIncomeCentres)
		{
			this.loadIncomeCentres = loadIncomeCentres;
		}

		private boolean loadStaff = false;
		public void setLoadStaff (boolean loadStaff)
		{
			this.loadStaff = loadStaff;
		}

		public StaffRosters mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			StaffRosters obj = new StaffRosters();
			obj.setSatffRosterId(rs.getInt(COLUMNS.SATFF_ROSTER_ID.getColumnAliasName()));
			obj.setStaffId(rs.getInt(COLUMNS.STAFF_ID.getColumnAliasName()));
			obj.setRosterDate(rs.getTimestamp(COLUMNS.ROSTER_DATE.getColumnAliasName()));
			obj.setStartTime(rs.getString(COLUMNS.START_TIME.getColumnAliasName()));
			obj.setFinishTime(rs.getString(COLUMNS.FINISH_TIME.getColumnAliasName()));
			obj.setTotalHours(rs.getDouble(COLUMNS.TOTAL_HOURS.getColumnAliasName()));
			obj.setPublicHoliday(rs.getBoolean(COLUMNS.PUBLIC_HOLIDAY.getColumnAliasName()));
			obj.setUpdatedOn(rs.getTimestamp(COLUMNS.UPDATED_ON.getColumnAliasName()));
			obj.setUpdatedBy(rs.getString(COLUMNS.UPDATED_BY.getColumnAliasName()));
			obj.setIncomeCenterId(rs.getInt(COLUMNS.INCOME_CENTER_ID.getColumnAliasName()));
			/*if (this.loadAllFKeys || this.loadIncomeCentres)
				obj.setIncomeCentres(IncomeCentresDB.ALIAS_ROW_MAPPER.mapRow(rs, rowNum));
			if (this.loadAllFKeys || this.loadStaff)
				obj.setStaff(StaffDB.ALIAS_ROW_MAPPER.mapRow(rs, rowNum));*/
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values ().length;
		for (COLUMNS c : COLUMNS.values ())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}